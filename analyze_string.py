#!/usr/bin/env python3
"""Detailed analysis of the Shawzin string that failed in Warframe."""

def analyze_warframe_string_detailed():
    """Analyze the exact string that failed in Warframe."""
    
    # The exact string from user (without scale header)
    note_string = "aAPaACaAaaAPaAPaAjaAyaAPxAOaABaAcaACaA3xAAxA5xA5aACaAdaAEaACaAJaAHxAEaAAxABaADaAZaADaADaACxAVxAcaADaAEaACaAUxAAaACaAaxAAaAHaAVxABxACaAbxABaAPaANxAAaACaAEaAKaALxADaAGaACaABxAEaAOxACaAEaABaACxAFxABaAB"
    
    print("=== DETAILED WARFRAME STRING ANALYSIS ===")
    print(f"String: {note_string}")
    print(f"Length: {len(note_string)} characters")
    print()
    
    # Check if divisible by 3
    remainder = len(note_string) % 3
    print(f"Length √∑ 3 = {len(note_string) // 3} v·ªõi d∆∞ {remainder}")
    
    if remainder == 0:
        print("‚úÖ ƒê·ªô d√†i chia h·∫øt cho 3 - OK")
        num_tokens = len(note_string) // 3
        print(f"S·ªë token: {num_tokens}")
        
        # Parse into 3-character tokens
        print("\n=== PH√ÇN T√çCH TOKENS ===")
        for i in range(0, min(len(note_string), 30), 3):  # Show first 10 tokens
            if i + 2 < len(note_string):
                token = note_string[i:i+3]
                note_char = token[0]
                time_char1 = token[1]
                time_char2 = token[2]
                print(f"Token {i//3 + 1:2d}: '{token}' -> Note='{note_char}' Time='{time_char1}{time_char2}'")
        
        if len(note_string) > 30:
            print(f"... v√† {len(note_string)//3 - 10} tokens n·ªØa")
            
    else:
        print(f"‚ùå ƒê·ªô d√†i KH√îNG chia h·∫øt cho 3 - INVALID!")
        print(f"Thi·∫øu {3 - remainder} k√Ω t·ª± ƒë·ªÉ tr√≤n")
        print("Warframe s·∫Ω reject chu·ªói n√†y!")
    
    # Check valid characters
    print(f"\n=== KI·ªÇM TRA K√ù T·ª∞ ===")
    valid_chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
    invalid_chars = []
    
    for i, char in enumerate(note_string):
        if char not in valid_chars:
            invalid_chars.append((i, char))
    
    if invalid_chars:
        print(f"‚ùå T√¨m th·∫•y {len(invalid_chars)} k√Ω t·ª± kh√¥ng h·ª£p l·ªá:")
        for pos, char in invalid_chars[:5]:  # Show first 5
            print(f"  V·ªã tr√≠ {pos}: '{char}'")
    else:
        print("‚úÖ T·∫•t c·∫£ k√Ω t·ª± ƒë·ªÅu h·ª£p l·ªá (base64)")
    
    # Check with the complete string including scale header
    complete_string = f"1\n{note_string}"
    print(f"\n=== CHU·ªñI HO√ÄN CH·ªàNH ===")
    print(f"V·ªõi scale header: {repr(complete_string)}")
    print(f"T·ªïng ƒë·ªô d√†i: {len(complete_string)} k√Ω t·ª±")
    
    # Try to validate with our parser
    print(f"\n=== TEST V·ªöI PARSER C·ª¶A CH√öNG TA ===")
    try:
        from midi2shawzin.encoder import read_shawzin_file
        import tempfile
        import os
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False) as f:
            f.write(complete_string)
            temp_path = f.name
        
        try:
            scale_id, notes = read_shawzin_file(temp_path)
            print(f"‚úÖ Parser th√†nh c√¥ng!")
            print(f"   Scale ID: {scale_id}")
            print(f"   S·ªë notes: {len(notes)}")
        except Exception as e:
            print(f"‚ùå Parser l·ªói: {e}")
        finally:
            os.unlink(temp_path)
            
    except ImportError:
        print("‚ùå Kh√¥ng th·ªÉ import parser")
    
    # Final assessment
    print(f"\n=== K·∫æT LU·∫¨N ===")
    if remainder == 0 and not invalid_chars:
        print("ü§î Chu·ªói ƒë√∫ng format theo l√Ω thuy·∫øt...")
        print("‚ùì C√≥ th·ªÉ v·∫•n ƒë·ªÅ kh√°c:")
        print("   - Timing values ngo√†i ph·∫°m vi Warframe")
        print("   - Note characters kh√¥ng h·ª£p l·ªá cho scale")
        print("   - Chu·ªói qu√° d√†i cho Warframe")
        print("   - Version Warframe kh√°c nhau")
    else:
        print("‚ùå Chu·ªói c√≥ l·ªói format!")
        if remainder != 0:
            print(f"   ‚Üí ƒê·ªô d√†i kh√¥ng chia h·∫øt cho 3")
        if invalid_chars:
            print(f"   ‚Üí C√≥ k√Ω t·ª± kh√¥ng h·ª£p l·ªá")

if __name__ == '__main__':
    analyze_warframe_string_detailed()
